{"version":3,"sources":["utils/Weather.tsx","components/WeatherTiles.tsx","components/TempPicker.tsx","components/CurrentWeather.tsx","components/LocationPicker.tsx","WeatherWidget.tsx","reportWebVitals.js","serviceWorkerRegistration.ts","index.js"],"names":["UNIT_MAP","SHORT_TEXT","LONG_TEXT","TYPE","SPEED","fetchWeatherData","location","units","a","fetch","API_URL","latitude","longitude","API_KEY","response","json","iconURL","icon","WeatherTiles","dailyData","className","map","data","i","index","dt","WeatherTile","date","Date","toLocaleString","weekday","minTemp","Math","round","temp","min","maxTemp","max","rainProb","pop","src","weather","alt","main","TempPicker","currUnit","setUnits","unitList","unit","newUnit","CurrentUnit","ToggleUnit","onClick","_","aria-label","CurrentWeather","currData","timezone","currDayOfWeek","currMonth","month","currDay","getDate","city","split","replace","suffix","clouds","humidity","wind_speed","degToDir","wind_deg","uvi","day","degrees","floor","LocationPicker","setLocation","useState","value","setValue","suggestions","setSuggestions","cityList","cities","inputProps","placeholder","onChange","event","newValue","onSuggestionsClearRequested","onSuggestionsFetchRequested","length","count","filter","name","startsWith","trim","getSuggestions","onSuggestionSelected","values","suggestionValue","cityObj","find","country","Number","lat","lng","getSuggestionValue","suggestion","renderSuggestion","WeatherWidget","weatherData","setWeatherData","error","setError","useEffect","fetchWeather","navigator","geolocation","getCurrentPosition","position","coords","message","Loading","Error","cod","current","daily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dc39ea51.chunk.js","sourcesContent":["/**\r\n * Types\r\n */\r\nexport interface LocationData {\r\n  latitude: number,\r\n  longitude: number\r\n}\r\n\r\ntype UnitMap = {\r\n  [key in UnitType]: {\r\n    SHORT_TEXT: string,\r\n    LONG_TEXT: string,\r\n    TYPE: string,\r\n    SPEED: string\r\n  }\r\n}\r\n\r\n/**\r\n * Unit constants\r\n */\r\nexport const UNIT_CELSIUS = 0;\r\nexport const UNIT_FAHRENHEIT = 1;\r\nexport const DEFAULT_UNIT = UNIT_CELSIUS;\r\nexport const UNIT_MAP: UnitMap = {\r\n  [UNIT_CELSIUS]: {\r\n    SHORT_TEXT: '°C',\r\n    LONG_TEXT: 'Celsius',\r\n    TYPE: 'metric',\r\n    SPEED: 'm/s'\r\n  },\r\n  [UNIT_FAHRENHEIT]: {\r\n    SHORT_TEXT: '°F',\r\n    LONG_TEXT: 'Fahrenheit',\r\n    TYPE: 'imperial',\r\n    SPEED: 'mi/h'\r\n  }\r\n}\r\n\r\nexport type UnitType = typeof UNIT_CELSIUS | typeof UNIT_FAHRENHEIT;\r\n\r\n\r\n/**\r\n * Weather API \r\n */\r\nexport const fetchWeatherData = async (location: LocationData | undefined, units: UnitType) => {\r\n  if (!location) return null;\r\n\r\n  const response = await fetch(\r\n    `${API_URL}?lat=${location?.latitude}&lon=${location?.longitude}&exclude=minutely,hourly,alerts&appid=${API_KEY}&units=${UNIT_MAP[units].TYPE}`);\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n/**\r\n * Get icon url from weather api\r\n */\r\nexport const iconURL = (icon: string) => {\r\n  return `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n}\r\n\r\nconst API_URL = 'https://api.openweathermap.org/data/2.5/onecall';\r\n\r\n// For demo purposes only\r\nconst API_KEY = '7bd4ff0e5412d0412ae1d1ff7b7102e0';\r\n","import '../styles/WeatherTiles.scss';\r\nimport { iconURL } from '../utils/Weather';\r\n\r\ntype WeatherTilesProps = {\r\n  dailyData: any\r\n}\r\n\r\nexport const WeatherTiles = ({ dailyData }: WeatherTilesProps) => {\r\n  return (\r\n    <div className=\"c-weather-tiles\">\r\n      {dailyData.map((data: any, i: number) => {\r\n        return <WeatherTile key={data.dt} data={data} index={i}  />\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\ntype WeatherTileProps = {\r\n  data: any,\r\n  index: number\r\n}\r\n\r\nconst WeatherTile = ({ data, index }: WeatherTileProps) => {\r\n  const date = new Date(data.dt * 1000).toLocaleString('en-au', { weekday: 'long' });\r\n  const minTemp = Math.round(data.temp.min);\r\n  const maxTemp = Math.round(data.temp.max);\r\n  const rainProb = Math.round(data.pop * 100);\r\n\r\n  return (\r\n    <div className=\"c-weather-tiles__tile\">\r\n      <p className=\"c-weather-tiles__tile-title\">\r\n        {index === 0 ? 'Today' : date}\r\n      </p>\r\n      <img\r\n        className=\"c-weather-tiles__tile-icon\"\r\n        src={iconURL(data.weather[0].icon)} alt={data.weather[0].main}\r\n      />\r\n      <p className=\"c-weather-tiles__tile-temp\">\r\n        <span className=\"is-high\">\r\n          {`${maxTemp}°`}\r\n        </span>\r\n        <span className=\"is-low\">\r\n          {`${minTemp}°`}\r\n        </span>\r\n      </p>\r\n      <p className=\"c-weather-tiles__tile-rain\">\r\n        <span className=\"is-label\">\r\n          Rain\r\n        </span>\r\n        <span className=\"is-percent\">\r\n          {`${rainProb}%`}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { UnitType, UNIT_CELSIUS, UNIT_FAHRENHEIT, UNIT_MAP } from \"../utils/Weather\";\r\n\r\ntype TempPickerProps = {\r\n  currUnit: UnitType,\r\n  setUnits: React.Dispatch<React.SetStateAction<UnitType>>,\r\n}\r\n\r\nexport const TempPicker = ({ currUnit, setUnits }: TempPickerProps) => {\r\n  const unitList: UnitType[] = [UNIT_CELSIUS, UNIT_FAHRENHEIT];\r\n\r\n  return (\r\n    <>\r\n      {unitList.map((unit: UnitType, i) => {\r\n        if (currUnit === unit) {\r\n          return <CurrentUnit key={unit} currUnit={unit} />\r\n        } else {\r\n          return <ToggleUnit key={unit} newUnit={unit} setUnits={setUnits} />\r\n        }\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nconst CurrentUnit = ({ currUnit }: { currUnit: UnitType }) => {\r\n  return (\r\n    <span className=\"is-units\">\r\n      {UNIT_MAP[currUnit].SHORT_TEXT}\r\n    </span>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders the button to switch to other unit\r\n */\r\nconst ToggleUnit = ({ newUnit, setUnits }: { newUnit: UnitType, setUnits: React.Dispatch<React.SetStateAction<UnitType>> }) => {\r\n  return (\r\n    <button onClick={_ => setUnits(newUnit)} className=\"is-units is-toggle\" aria-label={`Switch to ${UNIT_MAP[newUnit].TYPE}`}>\r\n      {UNIT_MAP[newUnit].SHORT_TEXT}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport '../styles/CurrentWeather.scss';\r\nimport { iconURL, UnitType, UNIT_MAP } from '../utils/Weather';\r\nimport { TempPicker } from './TempPicker';\r\n\r\ntype CurrentWeatherProps = {\r\n  currData: any,\r\n  units: UnitType,\r\n  timezone: string,\r\n  setUnits: React.Dispatch<React.SetStateAction<UnitType>>,\r\n}\r\n\r\nexport const CurrentWeather = ({ currData, units, timezone, setUnits }: CurrentWeatherProps) => {\r\n  const date = new Date(currData.dt * 1000);\r\n  const currDayOfWeek = date.toLocaleString('en-au', { weekday: 'long' });\r\n  const currMonth = date.toLocaleString('en-au', { month: 'long' });\r\n  const currDay = date.getDate();\r\n  const city = timezone.split('/')[1]?.replace('_', ' ') || timezone.split('/')[0];\r\n\r\n  return (\r\n    <div className=\"c-current-weather\">\r\n      <div className=\"c-current-weather__left\">\r\n        <h2 className=\"c-current-weather__title\">\r\n          {city}\r\n        </h2>\r\n        <p className=\"c-current-weather__date\">\r\n          {`${currDayOfWeek}, ${currMonth} ${currDay}${suffix(currDay)}`}\r\n        </p>\r\n\r\n        <p className=\"c-current-weather__description\">\r\n          {currData.weather[0].main}\r\n        </p>\r\n\r\n        <div className=\"c-current-weather__temp\">\r\n          <img\r\n            className=\"c-current-weather__icon\"\r\n            src={iconURL(currData.weather[0].icon)} alt={currData.weather[0].main}\r\n          />\r\n          <span className=\"is-temp\">\r\n            {Math.round(currData.temp)}\r\n          </span>\r\n\r\n          <TempPicker currUnit={units} setUnits={setUnits} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"c-current-weather__right\">\r\n        <p className=\"c-current-weather__detail\">\r\n          <span className=\"is-label\">\r\n            Clouds:\r\n          </span>\r\n          <span>\r\n            {` ${currData.clouds}%`}\r\n          </span>\r\n        </p>\r\n\r\n        <p className=\"c-current-weather__detail\">\r\n          <span className=\"is-label\">\r\n            Humidity:\r\n          </span>\r\n          <span>\r\n            {` ${currData.humidity}%`}\r\n          </span>\r\n        </p>\r\n\r\n        <p className=\"c-current-weather__detail\">\r\n          <span className=\"is-label\">\r\n            Wind:\r\n          </span>\r\n          <span>\r\n            {` ${Math.round(currData.wind_speed)} ${UNIT_MAP[units].SPEED} ${degToDir(currData.wind_deg)}`}\r\n          </span>\r\n        </p>\r\n\r\n        <p className=\"c-current-weather__detail\">\r\n          <span className=\"is-label\">\r\n            UV index:\r\n          </span>\r\n          <span>\r\n            {` ${currData.uvi}`}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Get suffix based on day on month\r\n * @param day Day of month\r\n * @returns Suffix string\r\n */\r\nexport const suffix = (day: number) => {\r\n  // If day ends in 1, 2, 3\r\n  const suffixArray = [\"st\", \"nd\", \"rd\"];\r\n  const suffixIndex = day % 10 - 1;\r\n\r\n  return (day >= 4 && day <= 20) || (day >= 24 && day <= 30)\r\n    ? \"th\"\r\n    : suffixArray[suffixIndex];\r\n}\r\n\r\n/**\r\n * Converts degrees to compass directions\r\n * @param degrees \r\n * @returns \r\n */\r\nexport const degToDir = (degrees: number) => {\r\n  const intervals = 16;\r\n  const degInterval = 360 / intervals;\r\n  const offset = 0.5;\r\n\r\n  const val = Math.floor((degrees / degInterval) + offset);\r\n  const arr = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"];\r\n  return arr[(val % intervals)];\r\n}","import cities from 'cities.json';\r\nimport React, { FormEvent, useState } from 'react';\r\nimport { LocationData } from '../utils/Weather';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport '../styles/LocationPicker.scss';\r\n\r\ninterface City {\r\n  country: string,\r\n  name: string,\r\n  lat: string,\r\n  lng: string\r\n}\r\n\r\ntype TempPickerProps = {\r\n  setLocation: React.Dispatch<React.SetStateAction<LocationData | undefined>>\r\n}\r\n\r\n/**\r\n * Renders location picker using react autosuggest.\r\n */\r\nexport const LocationPicker = ({ setLocation }: TempPickerProps) => {\r\n  const [value, setValue] = useState('');\r\n  const [suggestions, setSuggestions] = useState<City[]>([]);\r\n  const cityList = (cities as City[]);\r\n\r\n  const onChange = (event: FormEvent<HTMLElement>, { newValue }: { newValue: string }) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const inputProps = {\r\n    placeholder: 'Enter a city...',\r\n    value,\r\n    onChange: onChange\r\n  };\r\n\r\n  /**\r\n   * Generates suggestions for react autosuggest\r\n   */\r\n  const getSuggestions = (value: string): City[] => {\r\n    if (value.length < 3) return [];\r\n    let count = 0;\r\n    const maxItems = 10;\r\n    return cityList.filter((city:City) => {\r\n      if (city.name.startsWith(value.trim()) && count < maxItems) {\r\n        count++\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"c-location-picker\">\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsClearRequested={() => setSuggestions([])}\r\n        onSuggestionsFetchRequested={({ value }) => {\r\n          setValue(value);\r\n          setSuggestions(getSuggestions(value));\r\n        }}\r\n        onSuggestionSelected={(_, { suggestionValue }) => {\r\n          const values = suggestionValue.split(',');\r\n          const cityObj = cityList.find((city) => {\r\n            return city.name === values[0] && city.country === values[1];\r\n          })\r\n          \r\n          if (cityObj) {\r\n            setLocation({\r\n              latitude: Number(cityObj.lat),\r\n              longitude: Number(cityObj.lng)\r\n            });\r\n          }\r\n\r\n          setValue('');\r\n        }}\r\n        getSuggestionValue={suggestion => `${suggestion.name},${suggestion.country}`}\r\n        renderSuggestion={suggestion => <span>{`${suggestion.name}, ${suggestion.country}`}</span>}\r\n        inputProps={inputProps}\r\n      />\r\n    </div>\r\n  );\r\n}","import './styles/WeatherWidget.scss';\nimport React, { useEffect, useState } from 'react';\nimport { LocationData, fetchWeatherData, UnitType, DEFAULT_UNIT } from './utils/Weather';\nimport { WeatherTiles } from './components/WeatherTiles';\nimport { CurrentWeather } from './components/CurrentWeather';\nimport { LocationPicker } from './components/LocationPicker';\n\nfunction WeatherWidget() {\n  const [units, setUnits] = useState<UnitType>(DEFAULT_UNIT);\n  const [location, setLocation] = useState<LocationData>();\n  const [weatherData, setWeatherData] = useState<any>();\n  const [error, setError]  = useState<string | null>(null);\n\n  /**\n   * Fetch the weather data if location or units change\n   */\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        setWeatherData(await fetchWeatherData(location, units));\n\n        if (location) {\n          setError(null);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    if (location) {\n      fetchWeather();\n    }\n  }, [location, units]);\n\n  /**\n   * Gets the user geolocation from browser.\n   */\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      },\n      error => {\n        setError(error.message);\n      }\n    );\n  }, []);\n\n  const Loading = () => {\n    return (\n      <section className=\"c-weather-widget\">\n        <LocationPicker setLocation={setLocation} />\n        <p className=\"is-loading\">\n          Loading...\n        </p>\n      </section>\n    );\n  }\n  \n  const Error = ({ error }: { error: string }) => {\n    return (\n      <section className=\"c-weather-widget\">\n        <LocationPicker setLocation={setLocation} />\n        <p className=\"is-error\">\n          Failed to fetch data. Please choose another location.\n        </p>\n        <p className=\"is-error\">\n          {`Error: ${error}`}\n        </p>\n      </section>\n    );\n  }\n\n  if (error || weatherData?.cod) {\n    return (\n      <Error error={error || weatherData?.cod} />\n    );\n  } else if (!weatherData) {\n    return (\n      <Loading />\n    );\n  } else {\n    return (\n      <section className=\"c-weather-widget\">\n        <LocationPicker setLocation={setLocation} />\n        <CurrentWeather currData={weatherData.current} units={units} timezone={weatherData.timezone} setUnits={setUnits} />\n        <WeatherTiles dailyData={weatherData.daily} />\n      </section>\n    );\n  }\n}\n\nexport default WeatherWidget;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherWidget from './WeatherWidget';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherWidget />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}